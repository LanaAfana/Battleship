type: edu
files:
- name: src/battleship/Main.java
  visible: true
  text: |
    package battleship;

    public class Main {

        public static void main(String[] args) {
            // Write your code here
        }
    }
  learner_created: false
- name: test/Tests.java
  visible: false
  text: |-
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;


    public class Tests extends StageTest<String> {
        @DynamicTestingMethod
        CheckResult testExample() {

            TestedProgram main = new TestedProgram();
            String output = main.start().trim();
            String[][] matrix;

            if (!matrixIsEmpty(getFieldMatrix(output))) {
                return CheckResult.wrong("Not an empty game field at the start of the game");
            }

            // Filling the first player field
            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After starting the program, you should request " +
                    "the coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("F3 F7").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "F3 F7");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("A1 D1").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "A1 D1");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("J7 J10").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("J10 J8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "J10 J8");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("B9 D8").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("B9 D9").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "B9 D9");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("E6 D6").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                    "(Too close to another ship)");
            }

            output = main.execute("I2 J2").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "I2 J2");

            if (!output.toLowerCase().contains("enter")) {
                return CheckResult.wrong("No offer found to give the move to another player");
            }

            output = main.execute("");

            // Filling the second player field

            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After filling the first player field, you should request the second player's " +
                    "coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("H2 H6");
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "H2 H6");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("F3 F6");
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "F3 F6");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("H8 F8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "H8 F8");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("D4 D6").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "D4 D6");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("D8 C8");
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "D8 C8");

            if (!output.toLowerCase().contains("enter")) {
                return CheckResult.wrong("no offer found to give the move to another player");
            }
            output = main.execute("");

            // Players' moves
            String[] splittedOutput = output.split("---\n");
            if (splittedOutput.length != 2) {
                return CheckResult.wrong("An incorrect number of game fields.\nThere is should 2 fields separated by \"---------------------\"");
            }
            if (!matrixIsEmpty(getFieldMatrix(splittedOutput[0]))) {
                return CheckResult.wrong("At the start of the game the upper field should be empty");
            }
            findAllShips(getFieldMatrix(splittedOutput[1]),
                new String[]{"F3 F7", "A1 D1", "J10 J8", "B9 D9", "I2 J2"});

            output = main.execute("I3");
            if (!output.toLowerCase().contains("missed")) {
                return CheckResult.wrong("Incorrect reaction of the program if the player missed");
            }

            output = main.execute("");
            checkMissing(getFieldMatrix(output), "I3");

            splittedOutput = output.split("---\n");
            if (splittedOutput.length != 2) {
                return CheckResult.wrong("An incorrect number of game fields (2 should be)");
            }
            if (!matrixIsEmpty(getFieldMatrix(splittedOutput[0]))) {
                return CheckResult.wrong("At the start of the game the upper field should be empty");
            }
            findAllShips(getFieldMatrix(splittedOutput[1]),
                new String[]{"H2 H6", "F3 F6", "H8 F8", "D4 D6", "D8 C8"});

            output = main.execute("C9");
            if (!output.toLowerCase().contains("hit")) {
                return CheckResult.wrong("Incorrect reaction of the program if the player hit the ship");
            }
            main.execute("");

            makeMoveTillTheEnd(main);

            return CheckResult.correct();
        }

        void makeMoveTillTheEnd(TestedProgram main) {

            String[] secondPlayerMoves = {"A1", "B1", "C1", "D1", "B9", "C9", "D9", "F3", "F4", "F5", "F6", "F7", "I2", "J2", "J8", "J9", "J10"};
            String[] firstPlayerMoves = {"D4", "D5", "D6", "C8", "D8", "F3", "F4", "F5", "F6", "F7", "D10", "E10", "F10", "G10", "J1", "J2", "J3"};

            String[][] matrix;
            String output;
            int i;

            for (i = 0; i < 3; i++) {
                main.execute(firstPlayerMoves[i]);
                main.execute("");
                main.execute(secondPlayerMoves[i]);
                main.execute("");
            }

            main.execute(firstPlayerMoves[i]);
            main.execute("");

            output = main.execute(secondPlayerMoves[i]);
            if (!output.contains("sank")) {
                throw new WrongAnswer("After a ship was sunk you should print \"You sank a ship!\" and ask to press Enter.");
            }
            output = main.execute("");

            String[] splittedOutput = output.split("---\n");
            if (splittedOutput.length != 2) {
                throw new WrongAnswer("An incorrect number of game fields.\nThere is should 2 fields separated by \"---------------------\"");
            }

            matrix = getFieldMatrix(splittedOutput[1]);
            checkShot(matrix, "A1");
            checkShot(matrix, "B1");
            checkShot(matrix, "C1");
            checkShot(matrix, "D1");

            for (i = i + 1; i < secondPlayerMoves.length - 1; i++) {
                main.execute(firstPlayerMoves[i]);
                main.execute("");
                main.execute(secondPlayerMoves[i]);
                main.execute("");
            }

            main.execute(firstPlayerMoves[i]);
            main.execute("");
            output = main.execute(secondPlayerMoves[i]).toLowerCase();

            if (!output.contains("won") || !output.contains("congratulations")) {
                throw new WrongAnswer("If a player has sunk all enemy ships you should print:\n" +
                    "\"You sank the last ship. You won. Congratulations!\"");
            }
        }

        void findShipByCoordinates(String[][] matrix, String coordinates) {
            int[] coordinatesInt = parseCoordinates(coordinates);

            if (coordinatesInt[0] > coordinatesInt[2]) {
                int swap = coordinatesInt[0];
                coordinatesInt[0] = coordinatesInt[2];
                coordinatesInt[2] = swap;
            } else if (coordinatesInt[1] > coordinatesInt[3]) {
                int swap = coordinatesInt[1];
                coordinatesInt[1] = coordinatesInt[3];
                coordinatesInt[3] = swap;
            }

            if (coordinatesInt[0] == coordinatesInt[2]) {
                int cord = coordinatesInt[0];
                for (int i = coordinatesInt[1]; i <= coordinatesInt[3]; i++) {
                    if (!matrix[cord][i].toLowerCase().equals("x") && !matrix[cord][i].toLowerCase().equals("o")) {
                        throw new WrongAnswer("The ship's cells were not found at the coordinates \"" + coordinates + "\"");
                    }
                }
            } else {
                int cord = coordinatesInt[1];
                for (int i = coordinatesInt[0]; i <= coordinatesInt[2]; i++) {
                    if (!matrix[i][cord].toLowerCase().equals("x") && !matrix[i][cord].toLowerCase().equals("o")) {
                        throw new WrongAnswer("The ship's cells were not found at the \"" + coordinates + "\"");
                    }
                }
            }
        }

        boolean matrixIsEmpty(String[][] matrix) {
            for (String[] strings : matrix) {
                for (int j = 0; j < matrix.length; j++) {
                    if (!strings[j].trim().equals("~")) {
                        return false;
                    }
                }
            }
            return true;
        }

        void checkShot(String[][] matrix, String coordinate) {
            int[] parsedCoordinate = new int[2];
            parsedCoordinate[0] = charToInt(coordinate.toLowerCase().substring(0, 1));
            parsedCoordinate[1] = Integer.parseInt(coordinate.substring(1)) - 1;

            if (!matrix[parsedCoordinate[0]][parsedCoordinate[1]].toLowerCase().contains("x")) {
                throw new WrongAnswer("Expected hit in \"" + coordinate + "\".");
            }
        }

        boolean checkMissing(String[][] matrix, String coordinate) {
            int[] parsedCoordinate = new int[2];
            parsedCoordinate[0] = charToInt(coordinate.toLowerCase().substring(0, 1));
            parsedCoordinate[1] = Integer.parseInt(coordinate.substring(1)) - 1;

            return matrix[parsedCoordinate[0]][parsedCoordinate[1]].toLowerCase().contains("m");
        }

        int[] parseCoordinates(String coordinatesString) {
            String[] splittedCoords = coordinatesString.split(" ");
            int[] parsedCoordinates = new int[4];

            parsedCoordinates[0] = charToInt(splittedCoords[0].substring(0, 1));
            parsedCoordinates[1] = Integer.parseInt(splittedCoords[0].substring(1)) - 1;
            parsedCoordinates[2] = charToInt(splittedCoords[1].substring(0, 1));
            parsedCoordinates[3] = Integer.parseInt(splittedCoords[1].substring(1)) - 1;

            return parsedCoordinates;
        }

        int charToInt(String charCoordinate) {
            charCoordinate = charCoordinate.toLowerCase();
            char character = charCoordinate.charAt(0);
            return (int) character - (int) 'a';
        }

        String[][] getFieldMatrix(String output) {

            WrongAnswer cantParseException = new WrongAnswer("Can't parse the game field\n" +
                "Make sure you print it like in examples!");

            String[] splittedOutput = output.split("\n");
            String[][] matrix = new String[10][10];

            try {
                int index = 0;
                while (!(splittedOutput[index].contains("1") &&
                    splittedOutput[index].contains("2") &&
                    splittedOutput[index].contains("10"))) {
                    index++;
                    if (index > 1000) {
                        throw cantParseException;
                    }
                }
                index++;

                for (int i = 0; i < 10; i++) {
                    String temp = splittedOutput[index].substring(2).trim();
                    String[] splittedLine = temp.trim().split(" ");
                    if (splittedLine.length != 10) {
                        throw cantParseException;
                    }
                    matrix[i] = splittedLine;
                    index++;
                }
            } catch (IndexOutOfBoundsException ignored) {
                throw cantParseException;
            }

            return matrix;
        }

        boolean isGameFieldPrinted(String output) {
            return output.contains("1") && output.contains("2") && output.contains("10");
        }

        void findAllShips(String[][] matrix, String[] coordinates) {
            for (String item : coordinates) {
                findShipByCoordinates(matrix, item);
            }
        }
    }
  learner_created: false
- name: src/battleship/BattleField.java
  visible: true
  text: |
    package battleship;


    import java.util.Arrays;

    public class BattleField {
         private final String[][] field;
         private final int size;
         int[][] shipCrdnts;
         private static final String BUSY = "O";

         BattleField(int size) {
              this.size = size;
              field = new String[size][size];
              for (int i = 0; i < size; i++)
                   for (int j = 0; j < size; j++) {
                        field[i][j] = "~";
                   }
              shipCrdnts = new int[KindsOfShips.values().length][2];
         }

         enum KindsOfShips {
              AIRCRAFT(5, "Aircraft Carrier (5 cells)"),
              BATTLESHIP(4, "Battleship (4 cells)"),
              SUBMARINE(3, "Submarine (3 cells)"),
              CRUISER(3, "Cruiser (3 cells)"),
              DESTROYER(2, "Destroyer (2 cells)");

              private final int numOfCells;
              final String name;

              KindsOfShips(int numOfCells, String name) {
                   this.numOfCells = numOfCells;
                   this.name = name;
              }

              static int cellsToHit() {
                   int sum = 0;
                   for (KindsOfShips value : KindsOfShips.values()) {
                        sum += value.numOfCells;
                   }
                   return sum;
              }

         }

         public static char digitToLetter(int l) {
              return (char) (l + 65);
         }

         public static int letterToDigit(char l) {
              return (int) l - 65;
         }

         private static String getRawX(String input) {
              return input.split(" ")[0];
         }

         private static String getRawY(String input) {
              return input.split(" ")[1];
         }

         private boolean isNotNumber(int number) {
              return (number < 0 || number >= this.size);
         }

         private boolean isCorrectLength(int step, int[] crdnts) {
              int length = (crdnts[0] == crdnts[2]) ? Math.abs(crdnts[1] - crdnts[3]) + 1:
                      Math.abs(crdnts[0] - crdnts[2]) + 1;
              return length == KindsOfShips.values()[step].numOfCells;
         }

         private boolean isCorrectLocation(int[] crdnts) {
              return (crdnts[0] != crdnts[2] || crdnts[1] != crdnts[3]) &&
                      (crdnts[1] == crdnts[3] || crdnts[0] == crdnts[2]);
         }

         private boolean isCloseTo(int[] crdnts) {
              int i1 = (crdnts[0] == 0) ? 0 : crdnts[0] - 1;
              int i2 = (crdnts[2] == field.length - 1) ? crdnts[2] : crdnts[2] + 1;
              int j1 = (crdnts[1] == 0) ? 0 : crdnts[1] - 1;
              int j2 = (crdnts[3] == field.length - 1) ? crdnts[3] : crdnts[3] + 1;

              if (crdnts[0] == crdnts[2]) {
                   for (int j = j1; j <= j2; j++) {
                        if (field[crdnts[0]][j].equals(BUSY)) return true;
                   }
                   for (int i = i1; i <= i2; i++)
                        for (int j = crdnts[1]; j <= crdnts[3]; j++) {
                             if (field[i][j].equals(BUSY)) return true;
                        }
              } else {
                   for (int i= i1; i <= i2; i++) {
                        if (field[i][crdnts[1]].equals(BUSY)) return true;
                   }
                   for (int i = crdnts[0]; i <= crdnts[2]; i++)
                        for (int j = j1; j <= j2; j++) {
                             if (field[i][j].equals(BUSY)) return true;
                        }
              }
              return false;
         }

         int[] getCoordinates(String input, int step) {
              int[] result = new int[4];
              String x = getRawX(input);
              String y = getRawY(input);
              String numPart;
              try {
                   numPart = (x.length() == 2) ? String.valueOf(x.charAt(1)) :
                           x.charAt(1) + String.valueOf(x.charAt(2));
                   int c1 = Integer.parseInt(numPart) - 1;
                   numPart = (y.length() == 2) ? String.valueOf(y.charAt(1)) :
                           y.charAt(1) + String.valueOf(y.charAt(2));
                   int c2 = Integer.parseInt(numPart) - 1;
                   result[0] = Math.min(c1, c2);
                   result[2] = Math.max(c1, c2);
                   c1 = letterToDigit(x.charAt(0));
                   c2 = letterToDigit(y.charAt(0));
                   result[1] = Math.min(c1, c2);
                   result[3] = Math.max(c1, c2);
              } catch (NumberFormatException nfe) {
                   System.out.println("Error! Invalid input. Try again:");
              }
              return isCoordinates(result, step) ? result : new int[1];
         }

         int[] getCoordinate(String input) {
              int[] result = new int[2];
              try {
                   String numPart = (input.length() == 2) ? String.valueOf(input.charAt(1)) :
                           input.charAt(1) + String.valueOf(input.charAt(2));
                   result[0] = Integer.parseInt(numPart) - 1;
                   result[1] = letterToDigit(input.charAt(0));
              } catch (NumberFormatException nfe) {
                   System.out.println("Error! You entered the wrong coordinates! Try again:");
              }
              return isCoordinate(result) ? result : new int[1];
         }

         public boolean isCoordinates(int[] crdnts, int step) {
              if (isNotNumber(crdnts[1]) || isNotNumber(crdnts[0]) || isNotNumber(crdnts[3]) || isNotNumber(crdnts[2])) {
                   System.out.println("Error! Invalid input. Try again:");
                   return false;
              }
              if (!isCorrectLocation(crdnts)) {
                   System.out.println("Error! Wrong ship location! Try again:");
                   return false;
              }
              if (!isCorrectLength(step, crdnts)) {
                   System.out.printf("Error! Wrong length of the %s! Try again:%n",
                           KindsOfShips.values()[step].name.split("\\(")[0].trim());
                   return false;
              }
              if (isCloseTo(crdnts)) {
                   System.out.println("Error! You placed it too close to another one. Try again:");
                   return false;
              }
              return true;
         }

         public boolean isCoordinate(int[] crdnts) {
              if (isNotNumber(crdnts[0]) || isNotNumber(crdnts[1])) {
                   System.out.println("Error! You entered the wrong coordinates! Try again:");
                   return false;
              }
              return true;
         }

         public void output(boolean fog) {
              StringBuilder output = new StringBuilder("  ");

              for (int i = 1; i <= size; i++) {
                   output.append(i).append(" ");
              }
              output.append("\n");
              for (int i = 0; i < size; i++) {
                   for (int j = 0; j < size; j++) {
                        if (j == 0) {
                             output.append(digitToLetter(i)).append(" ");
                        }
                        if (fog && field[j][i].equals(BUSY)) {
                             output.append("~").append(" ");
                        } else {
                             output.append(field[j][i]).append(" ");
                        }
                   }
                   output.append("\n");
              }
              System.out.println(output);
         }

         public void addShip(int[] crdnts, int step) {
              shipCrdnts[step] = crdnts;
              for (int i = crdnts[0]; i <= crdnts[2]; i++){
                   for (int j = crdnts[1]; j <= crdnts[3]; j++) {
                        this.field[i][j] = BUSY;
                   }
              }
         }

         boolean isSankShip() {
              boolean flag = true;
              for (int i = 0; i < shipCrdnts.length; i++) {
                   if (Arrays.stream(shipCrdnts[i]).sum() == 0) continue;
                   if (shipCrdnts[i][0] == shipCrdnts[i][2]) {
                        for (int k = shipCrdnts[i][1]; k <= shipCrdnts[i][3]; k++) {
                             if (!field[shipCrdnts[i][0]][k].equals("X")) {
                                  return false;
                             }
                        }
                   } else {
                        System.out.println(shipCrdnts[i][0]);
                        System.out.println(shipCrdnts[i][2]);
                        for (int k = shipCrdnts[i][0]; k <= shipCrdnts[i][2]; k++) {
                             if (!field[k][shipCrdnts[i][1]].equals("X")) {
                                  return false;
                             }
                        }
                   }
                   if (flag) {
                        Arrays.fill(shipCrdnts[i], 0);
                        return true;
                   }
              }
              return false;
         }

         public int takeShot(int[] crdnt, int count) {
              switch (this.field[crdnt[0]][crdnt[1]]) {
                   case BUSY -> {
                        this.field[crdnt[0]][crdnt[1]] = "X";
                        this.output(true);
                        if (isSankShip()) {
                             if (count == BattleField.KindsOfShips.cellsToHit() - 1) {
                                  System.out.println("You sank the last ship. You won. Congratulations!");
                             } else {
                                  System.out.println("You sank a ship! Specify a new target:");
                             }
                        } else {
                             System.out.println("You hit a ship! Try again:");
                        }
                        return 1;
                   }
                   case "X" -> {
                        this.output(true);
                        System.out.println("You hit a ship! Try again:");
                        return 0;
                   }
                   case "~", "M" -> {
                        this.field[crdnt[0]][crdnt[1]] = "M";
                        this.output(true);
                        System.out.println("You missed! Try again:");
                        return 0;
                   }
                   default -> {
                        return 0;
                   }
              }
         }
    }
  learner_created: true
- name: src/battleship/Player.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/125/stages/667/implement#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">Hyperskill</a>
    to continue learning.
  time: "Thu, 03 Aug 2023 08:33:19 UTC"
record: -1
